/*! For license information please see main.js.LICENSE */
var MyScroll=function(r){var o={};function e(l){if(o[l])return o[l].exports;var c=o[l]={i:l,l:!1,exports:{}};return r[l].call(c.exports,c,c.exports,e),c.l=!0,c.exports}return e.m=r,e.c=o,e.d=function(r,o,l){e.o(r,o)||Object.defineProperty(r,o,{enumerable:!0,get:l})},e.r=function(r){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})},e.t=function(r,o){if(1&o&&(r=e(r)),8&o)return r;if(4&o&&"object"==typeof r&&r&&r.__esModule)return r;var l=Object.create(null);if(e.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:r}),2&o&&"string"!=typeof r)for(var c in r)e.d(l,c,function(o){return r[o]}.bind(null,c));return l},e.n=function(r){var o=r&&r.__esModule?function(){return r.default}:function(){return r};return e.d(o,"a",o),o},e.o=function(r,o){return Object.prototype.hasOwnProperty.call(r,o)},e.p="",e(e.s="./js/scroll/myScroll.js")}({"./enums/browsers.js":function(r,o,e){"use strict";r.exports={firefox:"FIREFOX",webkit:"WEBKIT",ie:"IE",edge:"EDGE"}},"./js/scroll/browserUtils.js":function(r,o,e){"use strict";var l,c=(l=e("./enums/browsers.js"))&&l.__esModule?l:{default:l};r.exports={detectBrowser:function(){return navigator.userAgent.match(/firefox/i)?c.default.firefox:"webkitTransformOriginZ"in document.documentElement.style?c.default.webkit:window.navigator.msPointerEnabled?c.default.ie:void 0}}},"./js/scroll/myScroll.js":function(r,o,e){"use strict";var l;(l=e("./enums/browsers.js"))&&l.__esModule,e("./js/scroll/browserUtils.js");var c=function(r){var o="\n    ".concat(r.selector,"::-webkit-scrollbar{\n      width:").concat(r.scrollWidth,"px;\n    }\n    ").concat(r.selector,"::-webkit-scrollbar-track{\n      background:").concat(r.scrollTrackColor,";\n    }\n    ").concat(r.selector,"::-webkit-scrollbar-thumb{\n      background:").concat(r.scrollThumbBackground,";\n    }\n    ").concat(r.selector,"::-webkit-scrollbar-thumb:hover{\n      background:").concat(r.scrollThumbHoverBackground,";\n    }\n    ").concat(r.selector,"{\n      scrollbar-face-color:").concat(r.scrollThumbBackground,";\n      scrollbar-arrow-color:#05B7FF;\n      scrollbar-track-color:").concat(r.scrollTrackColor,";\n      scrollbar-shadow-color:#05B7FF;\n      scrollbar-highlight-color:#05B7FF;\n      scrollbar-3dlight-color:#808080;\n      scrollbar-darkshadow-Color:#202020;\n    }\n    ").concat(r.selector,"{\n      scrollbar-color: ").concat(r.scrollThumbBackground," ").concat(r.scrollTrackColor,";\n      scrollbar-width: ").concat(r.scrollWidth,";\n    }\n  ");return r.useArrows,o};r.exports={run:function(r){var o={selector:r.selector||"",scrollWidth:r.scrollWidth||5,scrollTrackColor:r.scrollTrackColor||"#888",scrollThumbBackground:r.scrollThumbBackground||"blue",scrollThumbHoverBackground:r.scrollThumbHoverBackground||"red",useArrows:r.useArrows||!1},e=document.getElementById("my-scroll-style");e||((e=document.createElement("style")).id="my-scroll-style",e.type="text/css");var l=c(o);console.log(l),e.innerText=l,document.head.appendChild(e)}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,